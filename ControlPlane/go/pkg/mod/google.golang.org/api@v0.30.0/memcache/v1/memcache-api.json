{
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        }
      }
    }
  },
  "basePath": "",
  "baseUrl": "https://memcache.googleapis.com/",
  "batchPath": "batch",
  "canonicalName": "Cloud Memorystore for Memcached",
  "description": "Google Cloud Memorystore for Memcached API is used for creating and managing Memcached instances in GCP.",
  "discoveryVersion": "v1",
  "documentationLink": "https://cloud.google.com/memorystore/",
  "fullyEncodeReservedExpansion": true,
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "id": "memcache:v1",
  "kind": "discovery#restDescription",
  "mtlsRootUrl": "https://memcache.mtls.googleapis.com/",
  "name": "memcache",
  "ownerDomain": "google.com",
  "ownerName": "Google",
  "parameters": {
    "$.xgafv": {
      "description": "V1 error format.",
      "enum": [
        "1",
        "2"
      ],
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "location": "query",
      "type": "string"
    },
    "access_token": {
      "description": "OAuth access token.",
      "location": "query",
      "type": "string"
    },
    "alt": {
      "default": "json",
      "description": "Data format for response.",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "location": "query",
      "type": "string"
    },
    "callback": {
      "description": "JSONP",
      "location": "query",
      "type": "string"
    },
    "fields": {
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query",
      "type": "string"
    },
    "key": {
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query",
      "type": "string"
    },
    "oauth_token": {
      "description": "OAuth 2.0 token for the current user.",
      "location": "query",
      "type": "string"
    },
    "prettyPrint": {
      "default": "true",
      "description": "Returns response with indentations and line breaks.",
      "location": "query",
      "type": "boolean"
    },
    "quotaUser": {
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query",
      "type": "string"
    },
    "uploadType": {
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "location": "query",
      "type": "string"
    },
    "upload_protocol": {
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query",
      "type": "string"
    }
  },
  "protocol": "rest",
  "resources": {
    "projects": {
      "resources": {
        "locations": {
          "methods": {
            "get": {
              "description": "Gets information about a location.",
              "flatPath": "v1/projects/{projectsId}/locations/{locationsId}",
              "httpMethod": "GET",
              "id": "memcache.projects.locations.get",
              "parameterOrder": [
                "name"
              ],
              "parameters": {
                "name": {
                  "description": "Resource name for the location.",
                  "location": "path",
                  "pattern": "^projects/[^/]+/locations/[^/]+$",
                  "required": true,
                  "type": "string"
                }
              },
              "path": "v1/{+name}",
              "response": {
                "$ref": "Location"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ]
            },
            "list": {
              "description": "Lists information about the supported locations for this service.",
              "flatPath": "v1/projects/{projectsId}/locations",
              "httpMethod": "GET",
              "id": "memcache.projects.locations.list",
              "parameterOrder": [
                "name"
              ],
              "parameters": {
                "filter": {
                  "description": "The standard list filter.",
                  "location": "query",
                  "type": "string"
                },
                "name": {
                  "description": "The resource that owns the locations collection, if applicable.",
                  "location": "path",
                  "pattern": "^projects/[^/]+$",
                  "required": true,
                  "type": "string"
                },
                "pageSize": {
                  "description": "The standard list page size.",
                  "format": "int32",
                  "location": "query",
                  "type": "integer"
                },
                "pageToken": {
                  "description": "The standard list page token.",
                  "location": "query",
                  "type": "string"
                }
              },
              "path": "v1/{+name}/locations",
              "response": {
                "$ref": "ListLocationsResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ]
            }
          },
          "resources": {
            "instances": {
              "methods": {
                "applyParameters": {
                  "description": "ApplyParameters will update current set of Parameters to the set of\nspecified nodes of the Memcached Instance.",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:applyParameters",
                  "httpMethod": "POST",
                  "id": "memcache.projects.locations.instances.applyParameters",
                  "parameterOrder": [
                    "name"
                  ],
                  "parameters": {
                    "name": {
                      "description": "Required. Resource name of the Memcached instance for which parameter group updates\nshould be applied.",
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/instances/[^/]+$",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "path": "v1/{+name}:applyParameters",
                  "request": {
                    "$ref": "ApplyParametersRequest"
                  },
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                },
                "create": {
                  "description": "Creates a new Instance in a given project and location.",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/instances",
                  "httpMethod": "POST",
                  "id": "memcache.projects.locations.instances.create",
                  "parameterOrder": [
                    "parent"
                  ],
                  "parameters": {
                    "instanceId": {
                      "description": "Required. The logical name of the Memcached instance in the user\nproject with the following restrictions:\n\n* Must contain only lowercase letters, numbers, and hyphens.\n* Must start with a letter.\n* Must be between 1-40 characters.\n* Must end with a number or a letter.\n* Must be unique within the user project / location",
                      "location": "query",
                      "type": "string"
                    },
                    "parent": {
                      "description": "Required. The resource name of the instance location using the form:\n    `projects/{project_id}/locations/{location_id}`\nwhere `location_id` refers to a GCP region",
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "path": "v1/{+parent}/instances",
                  "request": {
                    "$ref": "Instance"
                  },
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                },
                "delete": {
                  "description": "Deletes a single Instance.",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}",
                  "httpMethod": "DELETE",
                  "id": "memcache.projects.locations.instances.delete",
                  "parameterOrder": [
                    "name"
                  ],
                  "parameters": {
                    "name": {
                      "description": "Required. Memcached instance resource name in the format:\n    `projects/{project_id}/locations/{location_id}/instances/{instance_id}`\nwhere `location_id` refers to a GCP region",
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/instances/[^/]+$",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "path": "v1/{+name}",
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                },
                "get": {
                  "description": "Gets details of a single Instance.",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}",
                  "httpMethod": "GET",
                  "id": "memcache.projects.locations.instances.get",
                  "parameterOrder": [
                    "name"
                  ],
                  "parameters": {
                    "name": {
                      "description": "Required. Memcached instance resource name in the format:\n    `projects/{project_id}/locations/{location_id}/instances/{instance_id}`\nwhere `location_id` refers to a GCP region",
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/instances/[^/]+$",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "path": "v1/{+name}",
                  "response": {
                    "$ref": "Instance"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                },
                "list": {
                  "description": "Lists Instances in a given project and location.",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/instances",
                  "httpMethod": "GET",
                  "id": "memcache.projects.locations.instances.list",
                  "parameterOrder": [
                    "parent"
                  ],
                  "parameters": {
                    "filter": {
                      "description": "List filter. For example, exclude all Memcached instances with name as\nmy-instance by specifying \"name != my-instance\".",
                      "location": "query",
                      "type": "string"
                    },
                    "orderBy": {
                      "description": "Sort results. Supported values are \"name\", \"name desc\" or \"\" (unsorted).",
                      "location": "query",
                      "type": "string"
                    },
                    "pageSize": {
                      "description": "The maximum number of items to return.\n\nIf not specified, a default value of 1000 will be used by the service.\nRegardless of the page_size value, the response may include a partial list\nand a caller should only rely on response's\nnext_page_token\nto determine if there are more instances left to be queried.",
                      "format": "int32",
                      "location": "query",
                      "type": "integer"
                    },
                    "pageToken": {
                      "description": "The next_page_token value returned from a previous List request,\nif any.",
                      "location": "query",
                      "type": "string"
                    },
                    "parent": {
                      "description": "Required. The resource name of the instance location using the form:\n    `projects/{project_id}/locations/{location_id}`\nwhere `location_id` refers to a GCP region",
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "path": "v1/{+parent}/instances",
                  "response": {
                    "$ref": "ListInstancesResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                },
                "patch": {
                  "description": "Updates an existing Instance in a given project and location.",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}",
                  "httpMethod": "PATCH",
                  "id": "memcache.projects.locations.instances.patch",
                  "parameterOrder": [
                    "name"
                  ],
                  "parameters": {
                    "name": {
                      "description": "Required. Unique name of the resource in this scope including project and\nlocation using the form:\n    `projects/{project_id}/locations/{location_id}/instances/{instance_id}`\n\nNote: Memcached instances are managed and addressed at regional level so\nlocation_id here refers to a GCP region; however, users may choose which\nzones Memcached nodes within an instances should be provisioned in.\nRefer to [zones] field for more details.",
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/instances/[^/]+$",
                      "required": true,
                      "type": "string"
                    },
                    "updateMask": {
                      "description": "Required. Mask of fields to update.\n *   `displayName`",
                      "format": "google-fieldmask",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "path": "v1/{+name}",
                  "request": {
                    "$ref": "Instance"
                  },
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                },
                "updateParameters": {
                  "description": "Updates the defined Memcached Parameters for an existing Instance.\nThis method only stages the parameters, it must be followed by\nApplyParameters to apply the parameters to nodes of the Memcached Instance.",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:updateParameters",
                  "httpMethod": "PATCH",
                  "id": "memcache.projects.locations.instances.updateParameters",
                  "parameterOrder": [
                    "name"
                  ],
                  "parameters": {
                    "name": {
                      "description": "Required. Resource name of the Memcached instance for which the parameters should be\nupdated.",
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/instances/[^/]+$",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "path": "v1/{+name}:updateParameters",
                  "request": {
                    "$ref": "UpdateParametersRequest"
                  },
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                }
              }
            },
            "operations": {
              "methods": {
                "cancel": {
                  "description": "Starts asynchronous cancellation on a long-running operation.  The server\nmakes a best effort to cancel the operation, but success is not\nguaranteed.  If the server doesn't support this method, it returns\n`google.rpc.Code.UNIMPLEMENTED`.  Clients can use\nOperations.GetOperation or\nother methods to check whether the cancellation succeeded or whether the\noperation completed despite cancellation. On successful cancellation,\nthe operation is not deleted; instead, it becomes an operation with\nan Operation.error value with a google.rpc.Status.code of 1,\ncorresponding to `Code.CANCELLED`.",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel",
                  "httpMethod": "POST",
                  "id": "memcache.projects.locations.operations.cancel",
                  "parameterOrder": [
                    "name"
                  ],
                  "parameters": {
                    "name": {
                      "description": "The name of the operation resource to be cancelled.",
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/operations/[^/]+$",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "path": "v1/{+name}:cancel",
                  "request": {
                    "$ref": "CancelOperationRequest"
                  },
                  "response": {
                    "$ref": "Empty"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                },
                "delete": {
                  "description": "Deletes a long-running operation. This method indicates that the client is\nno longer interested in the operation result. It does not cancel the\noperation. If the server doesn't support this method, it returns\n`google.rpc.Code.UNIMPLEMENTED`.",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
                  "httpMethod": "DELETE",
                  "id": "memcache.projects.locations.operations.delete",
                  "parameterOrder": [
                    "name"
                  ],
                  "parameters": {
                    "name": {
                      "description": "The name of the operation resource to be deleted.",
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/operations/[^/]+$",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "path": "v1/{+name}",
                  "response": {
                    "$ref": "Empty"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                },
                "get": {
                  "description": "Gets the latest state of a long-running operation.  Clients can use this\nmethod to poll the operation result at intervals as recommended by the API\nservice.",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
                  "httpMethod": "GET",
                  "id": "memcache.projects.locations.operations.get",
                  "parameterOrder": [
                    "name"
                  ],
                  "parameters": {
                    "name": {
                      "description": "The name of the operation resource.",
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/operations/[^/]+$",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "path": "v1/{+name}",
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                },
                "list": {
                  "description": "Lists operations that match the specified filter in the request. If the\nserver doesn't support this method, it returns `UNIMPLEMENTED`.\n\nNOTE: the `name` binding allows API services to override the binding\nto use different resource name schemes, such as `users/*/operations`. To\noverride the binding, API services can add a binding such as\n`\"/v1/{name=users/*}/operations\"` to their service configuration.\nFor backwards compatibility, the default name includes the operations\ncollection id, however overriding users must ensure the name binding\nis the parent resource, without the operations collection id.",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/operations",
                  "httpMethod": "GET",
                  "id": "memcache.projects.locations.operations.list",
                  "parameterOrder": [
                    "name"
                  ],
                  "parameters": {
                    "filter": {
                      "description": "The standard list filter.",
                      "location": "query",
                      "type": "string"
                    },
                    "name": {
                      "description": "The name of the operation's parent resource.",
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "required": true,
                      "type": "string"
                    },
                    "pageSize": {
                      "description": "The standard list page size.",
                      "format": "int32",
                      "location": "query",
                      "type": "integer"
                    },
                    "pageToken": {
                      "description": "The standard list page token.",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "path": "v1/{+name}/operations",
                  "response": {
                    "$ref": "ListOperationsResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                }
              }
            }
          }
        }
      }
    }
  },
  "revision": "20200729",
  "rootUrl": "https://memcache.googleapis.com/",
  "schemas": {
    "ApplyParametersRequest": {
      "description": "Request for ApplyParameters.",
      "id": "ApplyParametersRequest",
      "properties": {
        "applyAll": {
          "description": "Whether to apply instance-level parameter group to all nodes. If set to\ntrue, will explicitly restrict users from specifying any nodes, and apply\nparameter group updates to all nodes within the instance.",
          "type": "boolean"
        },
        "nodeIds": {
          "description": "Nodes to which we should apply the instance-level parameter group.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "CancelOperationRequest": {
      "description": "The request message for Operations.CancelOperation.",
      "id": "CancelOperationRequest",
      "properties": {},
      "type": "object"
    },
    "Empty": {
      "description": "A generic empty message that you can re-use to avoid defining duplicated\nempty messages in your APIs. A typical example is to use it as the request\nor the response type of an API method. For instance:\n\n    service Foo {\n      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n    }\n\nThe JSON representation for `Empty` is empty JSON object `{}`.",
      "id": "Empty",
      "properties": {},
      "type": "object"
    },
    "GoogleCloudMemcacheV1OperationMetadata": {
      "description": "Represents the metadata of a long-running operation.",
      "id": "GoogleCloudMemcacheV1OperationMetadata",
      "properties": {
        "apiVersion": {
          "description": "Output only. API version used to start the operation.",
          "type": "string"
        },
        "cancelRequested": {
          "description": "Output only. Identifies whether the user has requested cancellation\nof the operation. Operations that have successfully been cancelled\nhave Operation.error value with a google.rpc.Status.code of 1,\ncorresponding to `Code.CANCELLED`.",
          "type": "boolean"
        },
        "createTime": {
          "description": "Output only. Time when the operation was created.",
          "format": "google-datetime",
          "type": "string"
        },
        "endTime": {
          "description": "Output only. Time when the operation finished running.",
          "format": "google-datetime",
          "type": "string"
        },
        "statusDetail": {
          "description": "Output only. Human-readable status of the operation, if any.",
          "type": "string"
        },
        "target": {
          "description": "Output only. Server-defined resource path for the target of the operation.",
          "type": "string"
        },
        "verb": {
          "description": "Output only. Name of the verb executed by the operation.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudSaasacceleratorManagementProvidersV1Instance": {
      "id": "GoogleCloudSaasacceleratorManagementProvidersV1Instance",
      "properties": {
        "consumerDefinedName": {
          "description": "consumer_defined_name is the name that is set by the consumer. On the other\nhand Name field represents system-assigned id of an instance so consumers\nare not necessarily aware of it.\nconsumer_defined_name is used for notification/UI purposes for consumer to\nrecognize their instances.",
          "type": "string"
        },
        "createTime": {
          "description": "Output only. Timestamp when the resource was created.",
          "format": "google-datetime",
          "type": "string"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Optional. Resource labels to represent user provided metadata. Each label\nis a key-value pair, where both the key and the value are arbitrary strings\nprovided by the user.",
          "type": "object"
        },
        "maintenancePolicyNames": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "The MaintenancePolicies that have been attached to the instance.\nThe key must be of the type name of the oneof policy name defined in\nMaintenancePolicy, and the referenced policy must define the same policy\ntype. For complete details of MaintenancePolicy, please refer to\ngo/cloud-saas-mw-ug.",
          "type": "object"
        },
        "maintenanceSchedules": {
          "additionalProperties": {
            "$ref": "GoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSchedule"
          },
          "description": "The MaintenanceSchedule contains the scheduling information of published\nmaintenance schedule.",
          "type": "object"
        },
        "maintenanceSettings": {
          "$ref": "GoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSettings",
          "description": "Optional. The MaintenanceSettings associated with instance."
        },
        "name": {
          "description": "Unique name of the resource. It uses the form:\n `projects/{project_id}/locations/{location_id}/instances/{instance_id}`",
          "type": "string"
        },
        "producerMetadata": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Output only. Custom string attributes used primarily to expose\nproducer-specific information in monitoring dashboards.\nSee go/get-instance-metadata.",
          "type": "object"
        },
        "provisionedResources": {
          "description": "Output only. The list of data plane resources provisioned for this\ninstance, e.g. compute VMs. See go/get-instance-metadata.",
          "items": {
            "$ref": "GoogleCloudSaasacceleratorManagementProvidersV1ProvisionedResource"
          },
          "type": "array"
        },
        "slmInstanceTemplate": {
          "description": "Link to the SLM instance template. Only populated when updating SLM\ninstances via SSA's Actuation service adaptor.\nService producers with custom control plane (e.g. Cloud SQL) doesn't\nneed to populate this field. Instead they should use software_versions.",
          "type": "string"
        },
        "sloMetadata": {
          "$ref": "GoogleCloudSaasacceleratorManagementProvidersV1SloMetadata",
          "description": "Output only. SLO metadata for instance classification in the\nStandardized dataplane SLO platform.\nSee go/cloud-ssa-standard-slo for feature description."
        },
        "softwareVersions": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Software versions that are used to deploy this instance. This can be\nmutated by rollout services.",
          "type": "object"
        },
        "state": {
          "description": "Output only. Current lifecycle state of the resource (e.g. if it's being\ncreated or ready to use).",
          "enum": [
            "STATE_UNSPECIFIED",
            "CREATING",
            "READY",
            "UPDATING",
            "REPAIRING",
            "DELETING",
            "ERROR"
          ],
          "enumDescriptions": [
            "Unspecified state.",
            "Instance is being created.",
            "Instance has been created and is ready to use.",
            "Instance is being updated.",
            "Instance is unheathy and under repair.",
            "Instance is being deleted.",
            "Instance encountered an error and is in indeterministic state."
          ],
          "type": "string"
        },
        "tenantProjectId": {
          "description": "Output only. ID of the associated GCP tenant project.\nSee go/get-instance-metadata.",
          "type": "string"
        },
        "updateTime": {
          "description": "Output only. Timestamp when the resource was last modified.",
          "format": "google-datetime",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSchedule": {
      "description": "Maintenance schedule which is exposed to customer and potentially end user,\nindicating published upcoming future maintenance schedule",
      "id": "GoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSchedule",
      "properties": {
        "canReschedule": {
          "description": "Can this scheduled update be rescheduled?\nBy default, it's true and API needs to do explicitly check whether it's\nset, if it's set as false explicitly, it's false",
          "type": "boolean"
        },
        "endTime": {
          "description": "The scheduled end time for the maintenance.",
          "format": "google-datetime",
          "type": "string"
        },
        "rolloutManagementPolicy": {
          "description": "The rollout management policy this maintenance schedule is associated\nwith. When doing reschedule update request, the reschedule should be\nagainst this given policy.",
          "type": "string"
        },
        "startTime": {
          "description": "The scheduled start time for the maintenance.",
          "format": "google-datetime",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSettings": {
      "description": "Maintenance settings associated with instance. Allows service producers and\nend users to assign settings that controls maintenance on this instance.",
      "id": "GoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSettings",
      "properties": {
        "exclude": {
          "description": "Optional. Exclude instance from maintenance. When true, rollout service will not\nattempt maintenance on the instance. Rollout service will include the\ninstance in reported rollout progress as not attempted.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "GoogleCloudSaasacceleratorManagementProvidersV1NodeSloMetadata": {
      "description": "Node information for custom per-node SLO implementations.\nSSA does not support per-node SLO, but producers can populate per-node\ninformation in SloMetadata for custom precomputations.\nSSA Eligibility Exporter will emit per-node metric based on this information.",
      "id": "GoogleCloudSaasacceleratorManagementProvidersV1NodeSloMetadata",
      "properties": {
        "exclusions": {
          "description": "By default node is eligible if instance is eligible.\nBut individual node might be excluded from SLO by adding entry here.\nFor semantic see SloMetadata.exclusions.\nIf both instance and node level exclusions are present for time period,\nthe node level's reason will be reported by Eligibility Exporter.",
          "items": {
            "$ref": "GoogleCloudSaasacceleratorManagementProvidersV1SloExclusion"
          },
          "type": "array"
        },
        "location": {
          "description": "The location of the node, if different from instance location.",
          "type": "string"
        },
        "nodeId": {
          "description": "The id of the node.\nThis should be equal to SaasInstanceNode.node_id.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudSaasacceleratorManagementProvidersV1ProvisionedResource": {
      "description": "Describes provisioned dataplane resources.",
      "id": "GoogleCloudSaasacceleratorManagementProvidersV1ProvisionedResource",
      "properties": {
        "resourceType": {
          "description": "Type of the resource. This can be either a GCP resource or a custom one\n(e.g. another cloud provider's VM). For GCP compute resources use singular\nform of the names listed in GCP compute API documentation\n(https://cloud.google.com/compute/docs/reference/rest/v1/), prefixed with\n'compute-', for example: 'compute-instance', 'compute-disk',\n'compute-autoscaler'.",
          "type": "string"
        },
        "resourceUrl": {
          "description": "URL identifying the resource, e.g.\n\"https://www.googleapis.com/compute/v1/projects/...)\".",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudSaasacceleratorManagementProvidersV1SloEligibility": {
      "description": "SloEligibility is a tuple containing eligibility value: true if an instance\nis eligible for SLO calculation or false if it should be excluded from all\nSLO-related calculations along with a user-defined reason.",
      "id": "GoogleCloudSaasacceleratorManagementProvidersV1SloEligibility",
      "properties": {
        "eligible": {
          "description": "Whether an instance is eligible or ineligible.",
          "type": "boolean"
        },
        "reason": {
          "description": "User-defined reason for the current value of instance eligibility. Usually,\nthis can be directly mapped to the internal state. An empty reason is\nallowed.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudSaasacceleratorManagementProvidersV1SloExclusion": {
      "description": "SloExclusion represents an exclusion in SLI calculation applies to all SLOs.",
      "id": "GoogleCloudSaasacceleratorManagementProvidersV1SloExclusion",
      "properties": {
        "duration": {
          "description": "Exclusion duration. No restrictions on the possible values.\n\nWhen an ongoing operation is taking longer than initially expected,\nan existing entry in the exclusion list can be updated by extending the\nduration. This is supported by the subsystem exporting eligibility data\nas long as such extension is committed at least 10 minutes before the\noriginal exclusion expiration - otherwise it is possible that there will\nbe \"gaps\" in the exclusion application in the exported timeseries.",
          "format": "google-duration",
          "type": "string"
        },
        "reason": {
          "description": "Human-readable reason for the exclusion.\nThis should be a static string (e.g. \"Disruptive update in progress\")\nand should not contain dynamically generated data (e.g. instance name).\nCan be left empty.",
          "type": "string"
        },
        "sliName": {
          "description": "Name of an SLI that this exclusion applies to. Can be left empty,\nsignaling that the instance should be excluded from all SLIs defined\nin the service SLO configuration.",
          "type": "string"
        },
        "startTime": {
          "description": "Start time of the exclusion. No alignment (e.g. to a full minute) needed.",
          "format": "google-datetime",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudSaasacceleratorManagementProvidersV1SloMetadata": {
      "description": "SloMetadata contains resources required for proper SLO classification of the\ninstance.",
      "id": "GoogleCloudSaasacceleratorManagementProvidersV1SloMetadata",
      "properties": {
        "eligibility": {
          "$ref": "GoogleCloudSaasacceleratorManagementProvidersV1SloEligibility",
          "description": "Optional. User-defined instance eligibility."
        },
        "exclusions": {
          "description": "List of SLO exclusion windows. When multiple entries in the list match\n(matching the exclusion time-window against current time point)\nthe exclusion reason used in the first matching entry will be published.\n\nIt is not needed to include expired exclusion in this list, as only the\ncurrently applicable exclusions are taken into account by the eligibility\nexporting subsystem (the historical state of exclusions will be reflected\nin the historically produced timeseries regardless of the current state).\n\nThis field can be used to mark the instance as temporary ineligible\nfor the purpose of SLO calculation. For permanent instance SLO exclusion,\nuse of custom instance eligibility is recommended. See 'eligibility' field\nbelow.",
          "items": {
            "$ref": "GoogleCloudSaasacceleratorManagementProvidersV1SloExclusion"
          },
          "type": "array"
        },
        "nodes": {
          "description": "Optional. List of nodes.\nSome producers need to use per-node metadata to calculate SLO.\nThis field allows such producers to publish per-node SLO meta data,\nwhich will be consumed by SSA Eligibility Exporter and published in the\nform of per node metric to Monarch.",
          "items": {
            "$ref": "GoogleCloudSaasacceleratorManagementProvidersV1NodeSloMetadata"
          },
          "type": "array"
        },
        "tier": {
          "description": "Name of the SLO tier the Instance belongs to. This name will be expected to\nmatch the tiers specified in the service SLO configuration.\n\nField is mandatory and must not be empty.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Instance": {
      "id": "Instance",
      "properties": {
        "authorizedNetwork": {
          "description": "The full name of the Google Compute Engine\n[network](/compute/docs/networks-and-firewalls#networks) to which the\ninstance is connected. If left unspecified, the `default` network\nwill be used.",
          "type": "string"
        },
        "createTime": {
          "description": "Output only. The time the instance was created.",
          "format": "google-datetime",
          "type": "string"
        },
        "discoveryEndpoint": {
          "description": "Output only. Endpoint for Discovery API",
          "type": "string"
        },
        "displayName": {
          "description": "User provided name for the instance only used for display\npurposes. Cannot be more than 80 characters.",
          "type": "string"
        },
        "instanceMessages": {
          "description": "List of messages that describe current statuses of memcached instance.",
          "items": {
            "$ref": "InstanceMessage"
          },
          "type": "array"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Resource labels to represent user-provided metadata.\nRefer to cloud documentation on labels for more details.\nhttps://cloud.google.com/compute/docs/labeling-resources",
          "type": "object"
        },
        "memcacheFullVersion": {
          "description": "Output only. The full version of memcached server running on this instance.\nSystem automatically determines the full memcached version for an instance\nbased on the input MemcacheVersion.\nThe full version format will be \"memcached-1.5.16\".",
          "type": "string"
        },
        "memcacheNodes": {
          "description": "Output only. List of Memcached nodes.\nRefer to [Node] message for more details.",
          "items": {
            "$ref": "Node"
          },
          "type": "array"
        },
        "memcacheVersion": {
          "description": "The major version of Memcached software.\nIf not provided, latest supported version will be used. Currently the\nlatest supported major version is MEMCACHE_1_5.\nThe minor version will be automatically determined by our system based on\nthe latest supported minor version.",
          "enum": [
            "MEMCACHE_VERSION_UNSPECIFIED",
            "MEMCACHE_1_5"
          ],
          "enumDescriptions": [
            "",
            "Memcached 1.5 version."
          ],
          "type": "string"
        },
        "name": {
          "description": "Required. Unique name of the resource in this scope including project and\nlocation using the form:\n    `projects/{project_id}/locations/{location_id}/instances/{instance_id}`\n\nNote: Memcached instances are managed and addressed at regional level so\nlocation_id here refers to a GCP region; however, users may choose which\nzones Memcached nodes within an instances should be provisioned in.\nRefer to [zones] field for more details.",
          "type": "string"
        },
        "nodeConfig": {
          "$ref": "NodeConfig",
          "description": "Required. Configuration for Memcached nodes."
        },
        "nodeCount": {
          "description": "Required. Number of nodes in the Memcached instance.",
          "format": "int32",
          "type": "integer"
        },
        "parameters": {
          "$ref": "MemcacheParameters",
          "description": "Optional: User defined parameters to apply to the memcached process\non each node."
        },
        "state": {
          "description": "Output only. The state of this Memcached instance.",
          "enum": [
            "STATE_UNSPECIFIED",
            "CREATING",
            "READY",
            "DELETING",
            "PERFORMING_MAINTENANCE"
          ],
          "enumDescriptions": [
            "State not set.",
            "Memcached instance is being created.",
            "Memcached instance has been created and ready to be used.",
            "Memcached instance is being deleted.",
            "Memcached instance is going through maintenance, e.g. data plane rollout."
          ],
          "type": "string"
        },
        "updateTime": {
          "description": "Output only. The time the instance was updated.",
          "format": "google-datetime",
          "type": "string"
        },
        "zones": {
          "description": "Zones where Memcached nodes should be provisioned in.\nMemcached nodes will be equally distributed across these zones. If not\nprovided, the service will by default create nodes in all zones in the\nregion for the instance.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "InstanceMessage": {
      "id": "InstanceMessage",
      "properties": {
        "code": {
          "description": "A code that correspond to one type of user-facing message.",
          "enum": [
            "CODE_UNSPECIFIED",
            "ZONE_DISTRIBUTION_UNBALANCED"
          ],
          "enumDescriptions": [
            "Message Code not set.",
            "Memcached nodes are distributed unevenly."
          ],
          "type": "string"
        },
        "message": {
          "description": "Message on memcached instance which will be exposed to users.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListInstancesResponse": {
      "description": "Response for ListInstances.",
      "id": "ListInstancesResponse",
      "properties": {
        "nextPageToken": {
          "description": "Token to retrieve the next page of results, or empty if there are no more\nresults in the list.",
          "type": "string"
        },
        "resources": {
          "description": "A list of Memcached instances in the project in the specified location,\nor across all locations.\n\nIf the `location_id` in the parent field of the request is \"-\", all regions\navailable to the project are queried, and the results aggregated.",
          "items": {
            "$ref": "Instance"
          },
          "type": "array"
        },
        "unreachable": {
          "description": "Locations that could not be reached.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ListLocationsResponse": {
      "description": "The response message for Locations.ListLocations.",
      "id": "ListLocationsResponse",
      "properties": {
        "locations": {
          "description": "A list of locations that matches the specified filter in the request.",
          "items": {
            "$ref": "Location"
          },
          "type": "array"
        },
        "nextPageToken": {
          "description": "The standard List next-page token.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListOperationsResponse": {
      "description": "The response message for Operations.ListOperations.",
      "id": "ListOperationsResponse",
      "properties": {
        "nextPageToken": {
          "description": "The standard List next-page token.",
          "type": "string"
        },
        "operations": {
          "description": "A list of operations that matches the specified filter in the request.",
          "items": {
            "$ref": "Operation"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Location": {
      "description": "A resource that represents Google Cloud Platform location.",
      "id": "Location",
      "properties": {
        "displayName": {
          "description": "The friendly name for this location, typically a nearby city name.\nFor example, \"Tokyo\".",
          "type": "string"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Cross-service attributes for the location. For example\n\n    {\"cloud.googleapis.com/region\": \"us-east1\"}",
          "type": "object"
        },
        "locationId": {
          "description": "The canonical id for this location. For example: `\"us-east1\"`.",
          "type": "string"
        },
        "metadata": {
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          },
          "description": "Service-specific metadata. For example the available capacity at the given\nlocation.",
          "type": "object"
        },
        "name": {
          "description": "Resource name for the location, which may vary between implementations.\nFor example: `\"projects/example-project/locations/us-east1\"`",
          "type": "string"
        }
      },
      "type": "object"
    },
    "LocationMetadata": {
      "description": "Metadata for the given google.cloud.location.Location.",
      "id": "LocationMetadata",
      "properties": {
        "availableZones": {
          "additionalProperties": {
            "$ref": "ZoneMetadata"
          },
          "description": "Output only. The set of available zones in the location. The map is keyed\nby the lowercase ID of each zone, as defined by GCE. These keys can be\nspecified in the `zones` field when creating a Memcached instance.",
          "type": "object"
        }
      },
      "type": "object"
    },
    "MemcacheParameters": {
      "id": "MemcacheParameters",
      "properties": {
        "id": {
          "description": "Output only. The unique ID associated with this set of parameters. Users\ncan use this id to determine if the parameters associated with the instance\ndiffer from the parameters associated with the nodes and any action needs\nto be taken to apply parameters on nodes.",
          "type": "string"
        },
        "params": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "User defined set of parameters to use in the memcached process.",
          "type": "object"
        }
      },
      "type": "object"
    },
    "Node": {
      "id": "Node",
      "properties": {
        "host": {
          "description": "Output only. Hostname or IP address of the Memcached node used by the\nclients to connect to the Memcached server on this node.",
          "type": "string"
        },
        "nodeId": {
          "description": "Output only. Identifier of the Memcached node. The node id does not\ninclude project or location like the Memcached instance name.",
          "type": "string"
        },
        "parameters": {
          "$ref": "MemcacheParameters",
          "description": "User defined parameters currently applied to the node."
        },
        "port": {
          "description": "Output only. The port number of the Memcached server on this node.",
          "format": "int32",
          "type": "integer"
        },
        "state": {
          "description": "Output only. Current state of the Memcached node.",
          "enum": [
            "STATE_UNSPECIFIED",
            "CREATING",
            "READY",
            "DELETING",
            "UPDATING"
          ],
          "enumDescriptions": [
            "Node state is not set.",
            "Node is being created.",
            "Node has been created and ready to be used.",
            "Node is being deleted.",
            "Node is being updated."
          ],
          "type": "string"
        },
        "zone": {
          "description": "Output only. Location (GCP Zone) for the Memcached node.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "NodeConfig": {
      "description": "Configuration for a Memcached Node.",
      "id": "NodeConfig",
      "properties": {
        "cpuCount": {
          "description": "Required. Number of cpus per Memcached node.",
          "format": "int32",
          "type": "integer"
        },
        "memorySizeMb": {
          "description": "Required. Memory size in MiB for each Memcached node.",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Operation": {
      "description": "This resource represents a long-running operation that is the result of a\nnetwork API call.",
      "id": "Operation",
      "properties": {
        "done": {
          "description": "If the value is `false`, it means the operation is still in progress.\nIf `true`, the operation is completed, and either `error` or `response` is\navailable.",
          "type": "boolean"
        },
        "error": {
          "$ref": "Status",
          "description": "The error result of the operation in case of failure or cancellation."
        },
        "metadata": {
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          },
          "description": "Service-specific metadata associated with the operation.  It typically\ncontains progress information and common metadata such as create time.\nSome services might not provide such metadata.  Any method that returns a\nlong-running operation should document the metadata type, if any.",
          "type": "object"
        },
        "name": {
          "description": "The server-assigned name, which is only unique within the same service that\noriginally returns it. If you use the default HTTP mapping, the\n`name` should be a resource name ending with `operations/{unique_id}`.",
          "type": "string"
        },
        "response": {
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          },
          "description": "The normal response of the operation in case of success.  If the original\nmethod returns no data on success, such as `Delete`, the response is\n`google.protobuf.Empty`.  If the original method is standard\n`Get`/`Create`/`Update`, the response should be the resource.  For other\nmethods, the response should have the type `XxxResponse`, where `Xxx`\nis the original method name.  For example, if the original method name\nis `TakeSnapshot()`, the inferred response type is\n`TakeSnapshotResponse`.",
          "type": "object"
        }
      },
      "type": "object"
    },
    "OperationMetadata": {
      "description": "Represents the metadata of a long-running operation.",
      "id": "OperationMetadata",
      "properties": {
        "apiVersion": {
          "description": "Output only. API version used to start the operation.",
          "type": "string"
        },
        "cancelRequested": {
          "description": "Output only. Identifies whether the user has requested cancellation\nof the operation. Operations that have successfully been cancelled\nhave Operation.error value with a google.rpc.Status.code of 1,\ncorresponding to `Code.CANCELLED`.",
          "type": "boolean"
        },
        "createTime": {
          "description": "Output only. Time when the operation was created.",
          "format": "google-datetime",
          "type": "string"
        },
        "endTime": {
          "description": "Output only. Time when the operation finished running.",
          "format": "google-datetime",
          "type": "string"
        },
        "statusDetail": {
          "description": "Output only. Human-readable status of the operation, if any.",
          "type": "string"
        },
        "target": {
          "description": "Output only. Server-defined resource path for the target of the operation.",
          "type": "string"
        },
        "verb": {
          "description": "Output only. Name of the verb executed by the operation.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Status": {
      "description": "The `Status` type defines a logical error model that is suitable for\ndifferent programming environments, including REST APIs and RPC APIs. It is\nused by [gRPC](https://github.com/grpc). Each `Status` message contains\nthree pieces of data: error code, error message, and error details.\n\nYou can find out more about this error model and how to work with it in the\n[API Design Guide](https://cloud.google.com/apis/design/errors).",
      "id": "Status",
      "properties": {
        "code": {
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "format": "int32",
          "type": "integer"
        },
        "details": {
          "description": "A list of messages that carry the error details.  There is a common set of\nmessage types for APIs to use.",
          "items": {
            "additionalProperties": {
              "description": "Properties of the object. Contains field @type with type URL.",
              "type": "any"
            },
            "type": "object"
          },
          "type": "array"
        },
        "message": {
          "description": "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\ngoogle.rpc.Status.details field, or localized by the client.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UpdateParametersRequest": {
      "description": "Request for UpdateParameters.",
      "id": "UpdateParametersRequest",
      "properties": {
        "parameters": {
          "$ref": "MemcacheParameters",
          "description": "The parameters to apply to the instance."
        },
        "updateMask": {
          "description": "Required. Mask of fields to update.",
          "format": "google-fieldmask",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ZoneMetadata": {
      "id": "ZoneMetadata",
      "properties": {},
      "type": "object"
    }
  },
  "servicePath": "",
  "title": "Cloud Memorystore for Memcached API",
  "version": "v1",
  "version_module": true
}